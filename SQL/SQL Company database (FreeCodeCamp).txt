CREATE TABLE employee (
  emp_id INT PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40),
  birth_day DATE,
  sex VARCHAR(1),
  salary INT,
  super_id INT,
  branch_id INT
);

CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL -- If record in employee table corresponding to a particular emp_id is deleted, then the mgr_id in branch table will be set to NULL
);

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  emp_id INT, -- emp_id and client_id are both primary keys and foreign keys
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id), -- Composite key
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE, -- When we delete emp_id from the employee table, then the row corresponding to that empi_id should be deleted in works_with table
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

-- When we have primary keys and foreign keys, we have to insert data into the tables in a particular order
-- Corporate branch
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

-- Find all employees ordered by Salary
SELECT *
FROM
employee
ORDER BY salary;

-- Find first 5 employees from employee table 
SELECT first_name AS forename, last_name AS surname
FROM
employee
LIMIT 5;

-- Find out all the distinct genders
SELECT DISTINCT sex 
FROM
employee;

-- Find the number of employees
SELECT count(emp_id)
FROM 
employee; -- This will not count NULL values

-- Find the number of female employees born after 1970
SELECT count(emp_id)
FROM 
employee
WHERE
sex = "F" AND birth_day >= "1971-01-01";

-- Find the average of all employee salaries
SELECT AVG(salary)
FROM employee;

-- Find out the number of males and females
SELECT COUNT(sex), sex
FROM employee
GROUP BY sex;

-- Find the total sales of each salesman
SELECT emp_id, SUM(total_sales)
FROM works_with
GROUP BY emp_id;

-- Find clients who are working in a LLC
SELECT * 
FROM client
WHERE client_name LIKE '%LLC'; -- client_name must end with LLC (wildcard)

-- Find any branch suppliers who are in the label business
SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '% Label%'; -- % means any number of characters

-- Find all employees who were born in October
SELECT * 
FROM employee
WHERE birth_day LIKE '%10%';

-- Unions are used for combinibg select statemnts
-- Find a list of employees and branch names
SELECT first_name
FROM employee
UNION
SELECT branch_name
FROM branch; -- While using unions both the select statements should return the same number of columns
-- Both the select queries should also have the same datatype

-- Find a list of all money spent or earned by the company
SELECT salary
FROM employee
UNION
SELECT total_sales
FROM works_with;

-- Joins are used to combine two or more tables based on some related columns between them
INSERT INTO branch VALUES (4, "Buffalo", NULL, NULL);
-- Find all branches and names of their managers
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
JOIN branch
ON employee.emp_id = branch.mgr_id;

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
LEFT JOIN branch -- All the rows from the employee table will get selected but we will only be able to view those branch rows for which mgr_id = emp_id
ON employee.emp_id = branch.mgr_id;

-- Find all employees who have sold over 30000 to the clients
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN (
	SELECT works_with.emp_id
	FROM works_with
	WHERE works_with.total_sales > 40000
); -- Nested queries

-- Find all clients who are handled by the branch that Michael Scott manages (assume you know Michael's id)
SELECT client.client_name
FROM client
WHERE client.branch_id = (
	SELECT branch.branch_id
	FROM branch
	WHERE branch.mgr_id = 102
    LIMIT 1 -- As we are using =
);

-- Triggers
CREATE TABLE trigger_test (
	message VARCHAR(100)
);

DELIMITER $$ -- Changing the delimiter from semi-colon to $$ to show end of statement
CREATE
	TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
		INSERT INTO trigger_test VALUES ('Added new employee');
	END$$
DELIMITER ;

INSERT INTO employee VALUES (109, 'Oscar', 'Martinez', '1968-02-01', 'M', 69000, 106, 3);

SELECT * from trigger_test;

DELIMITER $$ -- Changing the delimiter from semi-colon to $$ to show end of statement
CREATE
	TRIGGER my_trigger_1 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
		INSERT INTO trigger_test VALUES (NEW.first_name); -- NEW refers to employee
	END$$
DELIMITER ;
